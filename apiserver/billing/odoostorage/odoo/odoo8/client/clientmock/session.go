// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/appuio/control-api/apiserver/billing/odoostorage/odoo/odoo8/client (interfaces: QueryExecutor)
//
// Generated by this command:
//
//	mockgen -destination=./clientmock/session.go -package clientmock . QueryExecutor
//
// Package clientmock is a generated GoMock package.
package clientmock

import (
	context "context"
	reflect "reflect"

	client "github.com/appuio/control-api/apiserver/billing/odoostorage/odoo/odoo8/client"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// CreateGenericModel mocks base method.
func (m *MockQueryExecutor) CreateGenericModel(arg0 context.Context, arg1 string, arg2 any) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenericModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenericModel indicates an expected call of CreateGenericModel.
func (mr *MockQueryExecutorMockRecorder) CreateGenericModel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenericModel", reflect.TypeOf((*MockQueryExecutor)(nil).CreateGenericModel), arg0, arg1, arg2)
}

// DeleteGenericModel mocks base method.
func (m *MockQueryExecutor) DeleteGenericModel(arg0 context.Context, arg1 string, arg2 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenericModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenericModel indicates an expected call of DeleteGenericModel.
func (mr *MockQueryExecutorMockRecorder) DeleteGenericModel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenericModel", reflect.TypeOf((*MockQueryExecutor)(nil).DeleteGenericModel), arg0, arg1, arg2)
}

// ExecuteQuery mocks base method.
func (m *MockQueryExecutor) ExecuteQuery(arg0 context.Context, arg1 string, arg2, arg3 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockQueryExecutorMockRecorder) ExecuteQuery(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockQueryExecutor)(nil).ExecuteQuery), arg0, arg1, arg2, arg3)
}

// SearchGenericModel mocks base method.
func (m *MockQueryExecutor) SearchGenericModel(arg0 context.Context, arg1 client.SearchReadModel, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGenericModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchGenericModel indicates an expected call of SearchGenericModel.
func (mr *MockQueryExecutorMockRecorder) SearchGenericModel(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGenericModel", reflect.TypeOf((*MockQueryExecutor)(nil).SearchGenericModel), arg0, arg1, arg2)
}

// UpdateGenericModel mocks base method.
func (m *MockQueryExecutor) UpdateGenericModel(arg0 context.Context, arg1 string, arg2 []int, arg3 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenericModel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenericModel indicates an expected call of UpdateGenericModel.
func (mr *MockQueryExecutorMockRecorder) UpdateGenericModel(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenericModel", reflect.TypeOf((*MockQueryExecutor)(nil).UpdateGenericModel), arg0, arg1, arg2, arg3)
}
